Exercise 1.1: 
1. opened exer1.html
2. down arrow, right arrow
3. down arrow (14x)
4. C-s s e l f - r e f e r e n t i a l 
5. C-s a r r o w  
6. C-e
7. C-a 
8. C-s to search for the word, C-e to move the cursor to the end of the line, and C-a to move to the beginning of the line. 
9. C-n C-f
   C-s l a b ENTER 
   C-s s e l f - r e f ENTER 
   C-s a r r o w ENTER
10. C-x C-s 

Exercise 1.2: 
1. opened exer2.html
2. C-u 1 8 M-g M-g M-k M-k M-k M-k
3. C-s D E L E T E M E C-a M-k 
4. C-s w i k i C-s C-s C-a C-p M-k M-k
5. C-s < ! - - C-k DELETE DELETE DELETE . < / p >
   C-s < ! - - C-a C-k 
6. d i f f SP - u SP  e x e r 1 . h t m l SP e x e r 2 . h t m l SP > e x e r 2 . d i f f

Exercise 1.3: 
1. open exer3.html
2. C-s a s s i g n m e n t C-f C-f DELETE 3 7
   C-s a s s i g n m e n t C-f C-f DELETE 3 7
3. ESC shift < C-s U T F - 8 DELETE U S - A S C I I
4. Esc shift < C-s < / o l > C-n ENTER
5. C-x C-c y y e s 
   d i f f SP - u SP  e x e r 1 . h t m l SP e x e r 3 . h t m l SP > e x e r 3 . d i f f

Exercise 1.4:
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
2. opened exer4.html
3. M shift > C-p C-M-k C-s < / h t m l > C-n ENTER C-y
   C-f C-M-k M shfit < C-s l o g l i n e s C-e C-b C-y 
   C-f C-k M shfit < C-s s u b m i t ENTER C-y 
   M shift > C-p C-f C-k M shift < C-s s u b m i t 
   M shift > C-p C-k M shift < C-s s u b m i t ENTER C-n C-n C-n C-y C-y ENTER
   C-k M shift < C-s h o m e w o r k C-n C-y C-p ENTER C-n C-n ENTER 
   C-f C-k M shift < C-s l a b ENTER C-y 
4. N/A
5. C-u 5 5 C-k 
6. C-_
7. C-s - - - SP e x e r 1 ENTER C-a < ! - - 
   M shift > - - > 
8. M shift < C-s < o l > ENTER DELETE O C-r 
   There are 7 instances of <ol>
9. d i f f SP - u e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f 

Exercise 1.5: 
1. e m a c s
   M-x m a k e - d i r e c t o r y ENTER 
   j u n k ENTER
2. C-x C-f j u n k / h e l l o . c ENTER 
   Copied the code
   C-x C-s 
3. M-x c o m p i l e ENTER
   g c c SP - o SP h e l l o SP h e l l o . c
4. M-x co m p i l e ENTER
   DELETE
   C-x 0
   C-x C-w h e l l o - o u t
5. Open hello-out and copy and paste the text.
 -*- mode: compilation; default-directory: "~/desktop/LAB1/junk/" -*-
Compilation started at Sat Sep 30 23:56:38

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Sat Sep 30 23:56:38

Exercise 1.6: 
1. emacs ENTER 
   C-x b ENTER
2. ( r a n d o m ) C-j
3. ( s e t q SP x SP ( r a n d o m ) ) C-j 
   x is 1660166573402722480
   ( s e t q SP y SP ( r a n d o m ) ) C-j
   y is -2138293397321026490
4. ( * SP x SP y ) C-j
   -1413398326864424928
5. M-: ( * SP x SP y ) 
   -1413398326864424928 (#o261424633272107250040, #x2c6299b5d11d5020)
   There is no difference between the outputs. 
6. The two random integers are not truly random in the mathematical sense, because programing languages, such as Elisp, are incapable of generating true random numbers. The random function starts from a value and from there, the numbers are variations of the same sequences. At one point, every time I invoked the random function, all of the numbers outputted were consecutively negative, switched to positive numbers for the next couple of invocations, then back to negative for a couple of more invocations. 
7. The (random) function is limited between the most-positive-fixnum, which is 1152921504606846975 and the most-negative-fixnum is -1152921504606846976. When the (random) function does not have an upper limit, it is most likely all of the time that the product of random x and y variables will be mathematically incorrect. 
The function below is done 100 times, setting x to a random integer, y to a random integer, and multiplying the two variables. The print x, print y, print c is to check and see if the product is mathematically correct. 
( d o t i m e s SP ( n SP 1 0 0 )
    ( s e t q SP x SP ( r a n d o m ) )
    ( s e t q SP y SP ( r a n d o m ) )
    ( s e t q SP c SP ( * SP x SP y ) )
    ( p r i n t SP x ) SP ( p r i n t SP y SP ) SP ( p r i n t SP c )
)
C-j 
Out of the 100 times the function ran, 100 times the product was incorrect, giving you a probability of 1, in this case. 
With the limit being at the most-positive-fixnum, when tried mathematically, the sum of 1/n for n from 1 to the most-positive-fixnum, is 42.166; this gives the possibility of being mathematically correct 42 times. To figure out the probability of being mathematically incorrect, (most-positive-fixnum)^2 - 42(most-postive-fixnum) divided by (most-positive-fixnum) and this equals to 0.99999999...

However, when there is a smaller limit to the random function, the product of random x and y variables is more likely to be mathematically correct. 
( d o t i m e s SP ( n SP 1 0 0 )
    ( s e t q SP x SP ( r a n d o m SP 50) )
    ( s e t q SP y SP ( r a n d o m SP 50) )
    ( s e t q SP c SP ( * SP x SP y ) )
    ( p r i n t SP x ) SP ( p r i n t SP y SP ) SP ( p r i n t SP c )
)
C-j
The function ran 100 times and the times it was incorrect is 0, making the probability of the product being mathematically incorrect 0, in this case. 
